#!/bin/bash

# Define the path to the cellframe-node-cli binary
CLI_PATH="/opt/cellframe-node/bin/cellframe-node-cli"

# Define the output directory and debug file
output_dir="/var/www/html/"
debug_file="/var/www/html/debug_output.txt"

# Get the hostname
hostname=$(hostname)

# Get service status and uptime for the cellframe-node service
service_status=$(systemctl status cellframe-node | grep "Active" | awk '{print $2, $3, $4, $5, $6, $7, $8, $9, $10}')

# Get node version using the CLI path variable
node_version=$($CLI_PATH version)

# Get the list of networks
NETWORKS=$($CLI_PATH net list | grep -v 'networks:' | tr ',' '\n' | grep -v '^$')

# Loop through each network and gather information
for network in $NETWORKS; do
  # Define the output file for each network
  output_file="${output_dir}node_info_${network}.html"

  # Initialize HTML content for each network
  echo "<html>" > $output_file
  echo "<head></head>" >> $output_file
  echo "<body>" >> $output_file
  echo "<h1>Node Information for Network: $network</h1>" >> $output_file

  # Section: Node Info
  echo "<h2>Node Info</h2>" >> $output_file

  # Get CPU utilization (using top command for CPU usage of all cores)
  cpu_utilization=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')

  # Get memory utilization (using free command)
  memory_utilization=$(free | grep Mem | awk '{printf "%.2f", $3/$2 * 100.0}')

  # Get node address
  node_address=$($CLI_PATH net get status -net "$network" 2>&1 | grep "current_addr" | awk '{print $2}')

  # Append Node Info to HTML content
  echo "<p>Hostname: $hostname</p>" >> $output_file
  echo "<p>CPU Utilization: $cpu_utilization%</p>" >> $output_file
  echo "<p>Memory Utilization: $memory_utilization%</p>" >> $output_file
  echo "<p>Active: $service_status</p>" >> $output_file
  echo "<p>Node Address: $node_address</p>" >> $output_file
  echo "<p>Node Version: $node_version</p>" >> $output_file

  # Section: Network Info
  echo "<h2>Network Info</h2>" >> $output_file

  # Get network information
  status=$($CLI_PATH net get status -net "$network" 2>&1)
  node_state=$(echo "$status" | grep -m 1 "current:" | awk '{print $2}')
  network_target_state=$(echo "$status" | grep -m 1 "target:" | awk '{print $2}')
  node_percent=$(echo "$status" | grep -A 5 "main:" | grep "percent:" | awk '{print $2}')

  # Get block height for each network
  block_info=$($CLI_PATH block list -net $network -chain main | tail -2)
  echo "Block Info for network $network: $block_info" >> $debug_file

  if [[ -z "$block_info" || "$block_info" =~ ^Error ]]; then
      echo "<p>Error fetching block information for network $network.</p>" >> $output_file
  else
      num_blocks=$(echo "$block_info" | grep -oP '(?<=have blocks: )\d+')
      echo "<p>Block Height: $num_blocks</p>" >> $output_file
  fi

  # Append Network Info to HTML content
  echo "<p>Our Node State: $node_state</p>" >> $output_file
  echo "<p>Network State: $network_target_state</p>" >> $output_file
  echo "<p>Sync Percentage: $node_percent%</p>" >> $output_file
  echo "<p>Block Height: $num_blocks</p>" >> $output_file

  # Fetch certificate name from config
  cert_name=$(grep "blocks-sign-cert=" /opt/cellframe-node/etc/network/"$network".cfg | sed 's/^blocks-sign-cert=//')

  # Fetch certificate status to ensure it is correctly initialized
  cert_status=$($CLI_PATH srv_stake list keys -net "$network" -cert "$cert_name")

  # Extract the stake value and related weight properly
  stake_value=$(echo "$cert_status" | grep -oP 'Stake value: \K[0-9.]+')
  related_weight=$(echo "$cert_status" | grep -oP 'Related weight: \K[0-9.]+')

  # Debugging output to check variables
  echo "Stake Value: $stake_value" >> $debug_file

  # Section: Rewards Info
  echo "<h2>Rewards Info</h2>" >> $output_file

  # Get autocollect status
  autostatuss=$($CLI_PATH block autocollect status -net "$network" -chain main | grep "Autocollect status:" | sed 's/^[ \t]*//')
  autostatussx=$($CLI_PATH block autocollect status -net "$network"  -chain main | grep "Rewards status: Total prepared value" | sed 's/, where profit.*//' | sed 's/^[ \t]*//')

  # Fetch the correct fee address from the config file
  fee_addr=$(grep "fee_addr=" /opt/cellframe-node/etc/network/"$network".cfg | sed 's/^fee_addr=//')

  # Calculate rewards and APY
  last_date=$($CLI_PATH tx_history -addr "$fee_addr"  | grep -B 16 "reward collecting"  | grep tx_created | head -n 1 | sed 's/^[ \t]*//' | sed 's/^tx_created: //')
  history=$($CLI_PATH tx_history -net -addr "$fee_addr")
  total_rewards=$(echo "$history" | grep -A 22 "status: ACCEPTED" | grep -B 4 "source_address: reward collecting" | grep recv_coins | cut -d ":" -f 2 | awk '{ sum += $1 } END { print sum }')

  # Ensure only stake_value is checked for calculations
  if [[ -n "$stake_value" && "$stake_value" != "0" ]]; then
    output_timestamp=$(date -d "$last_date" +"%s")
    current_timestamp=$(date +"%s")
    time_difference=$((current_timestamp - output_timestamp))
    days_passed=$((time_difference / 86400))

    echo "Days Passed: $days_passed" >> $debug_file

    if [[ "$days_passed" -gt 0 ]]; then
      yearly_e_gain=$(echo "scale=5; $total_rewards / $days_passed * 365" | bc)
      apy=$(echo "scale=5; ($yearly_e_gain / $stake_value) * 100" | bc)
    else
      apy="undefined"
    fi
  else
    apy="undefined"
  fi

  echo "APY Calculation: Stake Value: $stake_value, Total Rewards: $total_rewards, Days Passed: $days_passed, APY: $apy" >> $debug_file

  # Append Rewards Info to HTML content
  echo "<p>Autocollect Status: $autostatuss</p>" >> $output_file
  echo "<p>Rewards Status: $autostatussx</p>" >> $output_file

  # Calculate daily rewards
  dates=()
  for i in {0..30}; do
    dates+=("$(date --date="$i days ago" '+%a, %d %b %Y')")
  done

  calculate_daily_rewards() {
    local history="$1"
    local total_rewards=0
    local days_counted=0
    echo "<button onclick=\"var blockList = document.getElementById('${network}-list-a'); if (blockList.style.display === 'none') { blockList.style.display = 'block'; this.innerHTML = 'Daily Rewards'; } else { blockList.style.display = 'none'; this.innerHTML = 'Daily Rewards'; }\">Daily Rewards</button>" >> $output_file
    echo "<div id=\"${network}-list-a\" style=\"display:none\">" >> $output_file

    for day in "${dates[@]}"; do
      daily_reward=$(echo "$history" | grep -A 35 "status: ACCEPTED" | grep -A 18 "$day" | grep -B 4 "source_address: reward collecting" | grep recv_coins | cut -d ":" -f 2 | awk '{ sum += $1 } END { print sum }')

      if [[ -z "$daily_reward" || ! "$daily_reward" =~ ^[0-9]*\.?[0-9]+$ ]]; then
        daily_reward=0
      fi

      # Format each reward on a new line
      echo "$day: $daily_reward<br>" >> $output_file
      total_rewards=$(echo "$total_rewards + $daily_reward" | bc -l)
      days_counted=$((days_counted + 1))
    done

    echo "</div>" >> $output_file

    if [[ $days_counted -gt 0 ]]; then
      average=$(printf "%.2f" $(echo "$total_rewards / $days_counted" | bc -l))
      yearly_estimate=$(echo "$average * 365" | bc -l)
      echo "<p>$days_counted days average ($average /Day)</p>" >> $output_file
    else
      echo "<p>No rewards were counted.</p>" >> $output_file
    fi
  }

  calculate_daily_rewards "$history"
stake_value=$(echo "$stake_value * 1000" | bc)
apy=$(echo "scale=2; $yearly_estimate / $stake_value * 100" | bc)

  echo "<p>Estimated APY: $apy%</p>" >> $output_file
  echo "<p>Last Signed Block Date: $last_date</p>" >> $output_file

  # Section: Certificate Info
  echo "<h2>Certificate Info</h2>" >> $output_file

  # Check if cert_status and stake_value were correctly extracted
  if [[ -z "$cert_status" ]]; then
    echo "<p>Error fetching certificate information for network $network.</p>" >> $output_file
  else
    # Append Certificate Info to HTML content
    echo "<p>Delegated Certificate Status: Related weight: $related_weight%</p>" >> $output_file
#    echo "<p>Delegated Value: $stake_value</p>" >> $output_file
  fi

  echo "</body>" >> $output_file
  echo "</html>" >> $output_file
done
